{% extends "base.html.twig" %}

{% block stylesheets %}
            <!-- Font Awesome -->
            <link rel="stylesheet" href="{{ asset('adminLTE/plugins/fontawesome-free/css/all.min.css') }}">
            <!-- Ionicons -->
            <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
            <!-- Theme style -->
            <link rel="stylesheet" href="{{ asset('adminLTE/dist/css/adminlte.min.css') }}">
            <!-- Google Font: Source Sans Pro -->
            <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700" rel="stylesheet">	
            <!-- Datiuser style-->
	        <link href="{{ asset('assets/css/confirm-user-popup.css') }}" rel="stylesheet">        
{% endblock %}

{% block head_javascripts %}
            <!-- Sweet alert scripts-->
            <script src="{{ asset('assets/js/sweetalert2/sweetalert2.all.min.js') }}"></script>	

{% endblock %}

 {% block body %}
 <div id="body_mask" class="body_mask"></div> 

 {% endblock %} 

{% block javascripts %}
            <!-- Waves Effect Plugin Js -->
            <script src="{{ asset('adminLTE/plugins/node-waves/waves.js') }}"></script>
            <!-- AdminLTE App -->
            <script src="{{ asset('adminLTE/dist/js/adminlte.js') }}"></script>
            <!-- AdminLTE for demo purposes -->
            <script src="{{ asset('adminLTE/dist/js/demo.js') }}"></script> 
            <!-- International Telephone Input-->	
            <script src="{{ asset('assets/js/intlTelInput/intlTelInput.js') }}"></script>
            <!-- Daticash QS-->	
            <script src="{{ asset('assets/js/daticashQS.js') }}"></script>


<script>
    $('body').css('overflow', 'hidden');
/** Déclaration des fonctions et des vatiables**/
    
            function daticash_select_transaction_status_position(step){
            	console.log(step);
            		switch(step) {
                		case 1:
            				$(".step-one").addClass("finish active");
            				break;
            			case 2:
            				$(".step-one").addClass("finish active");$(".step-one i").removeClass("fa-user").addClass("fa-check text-success");
            				$(".step-two").addClass("finish active");
            				break;
            				
            			case 3:
            				$(".step-one").addClass("finish active");$(".step-one i").removeClass("fa-user").addClass("fa-check text-success");
            				$(".step-two").addClass("finish active");$(".step-two i").removeClass("fa-edit").addClass("fa-check text-success");				
            				$(".step-three").addClass("finish active");
            				break;
            			default :
            				$("#daticash_display_transaction_status_topUp").addClass("tab");			
            		}		
            }  
    
        	function daticash_display_transaction_status_topUp(){
        		return (
        				'<div id="daticash_display_transaction_status_topUp">'+
        					'<div class="head_steps text-center">'+
        						'<span class="step step-one">'+
        							'<div class="step-icon"><i class="fa fa-user"></i>'+
        							'</div>'+
        							'<p>User Account Verification</p>'+
        						'</span>'+
        						'<span class="step step-two">'+
        							'<div class="step-icon"><i class="fa fa-edit"></i>'+
        							'</div>'+
        							'<p>Balance Check</p>'+
        						'</span>'+
        						'<span class="step step-three">'+
        							'<div class="step-icon"><i class="fa fa-credit-card"></i>'+
        							'</div>'+
        							'<p>Transaction Processing</p>'+
        						'</span>'+
        					'</div>'+
        				'</div>'
        			);			
        	}        
        
/** Fin de la déclaration **/
            
            
			$(document).ready(function() {
			    let transaction_id = undefined;
			    transaction_id = "{{ transaction.transaction_status.id  is defined ? transaction.transaction_status.id : ""}}" 
			    
                if(undefined !== transaction_id){
                /************************************************************ begin process transaction ******************************************/
                    //let transaction_id = transaction_id
            		let status						
            		let timerInterval
            		let checkPath = "{{ path("transactions_view") }}";
            		
            		Swal.fire({
            		  title: "Traitement en cour",
            		  html: "STATUS : <b class=\"status_js\">Mise à jour de l\'historique de la transaction.</b>.",
            		  icon: "info",
            		  timer: 10000,
            		  timerProgressBar: true,
            		  onBeforeOpen: () => {
					    // afficher le satatu de la transaction
                        $('#daticash_display_transaction_status_topUp').remove();
						$('.swal2-container').append(daticash_display_transaction_status_topUp());
						$('#daticash_display_transaction_status_topUp').css(
						{
							"position" : "fixed",
							"top" : "inherit",
							"padding-top" : "12px"
						});
						
						daticash_select_transaction_status_position(3);	             		      
            			Swal.showLoading()
            			timerInterval = setInterval(() => {
            				//return fetch(`https://api.daticash.com/api/mobilemoney/${transaction_id}`, {"headers": {"apikey": "sec_5ed93806dd2ca"}})//confirm-password url
            				return fetch(checkPath + "/" + transaction_id , {"method": "GET"})//check status url
            				  .then(
            					function(response) {
            						console.log("application response = " + response);
            					  if (!response.ok) {
            					  // Examine the text in the response
            						  response.json().then(function(data) {
            							 status = data.step_description
            							console.log(data.step_description);
            						})
            					  }else{
            					  // Examine the text in the response
            						  response.json().then(function(data) {
            						      
            						      if(data.code === undefined){
                							 status = data.step_description
                							console.log("api response = " +data.step_description);
                						
                							switch(data.status.toLowerCase()) {
                								case "completed"://Action successfully
                										Swal.fire(
                										  "Complete!",
                										  "Your transaction Successfully Completed.",
                										  "success"
                										)
                									break;
                									
                								case "failed"://BAD_REQUEST
                										Swal.fire(
                										  "ERROR!",
                										  "Something is wrong with the request, possibly missing or improperly formatted parameters",
                										  "error"
                										)
                									break;
                									
                								case "confirm_requested"://CONFIRM-PIN-CODE
                								    clearInterval(timerInterval)
                								    Swal.stopTimer()//Stops the timer in case when timer parameter is set. Returns the time left
                								    Swal.isTimerRunning()//Returns the status of a timer: true if is running, false if it's paused
                										//let currency_sent = data.currency_sent;
                										//let amount_sent = data.amount_sent;
                										//let recipient_phone = data.recipient_phone;
                										let recipient_username = data.recipient_username;
                										let confirmPath = "{{ path("transactions_update") }}";
                										
                										Swal.fire({
                										  title: "Confirm Transaction!",
                										  text: "Vous etes sur le point d\'effectuer une transaction de "+amount_sent+" "+currency_sent+" vers le "+recipient_phone+"("+recipient_username+"). entrer votre PIN pour confirmer la transaction:",
                										  input: "password",
                											//closeOnConfirm: true,
                											inputPlaceholder: "Your PIN Code",				  
                										  inputAttributes: {
                											autocapitalize: "off"
                										  },
                										  showCancelButton: false,				  
                										  showLoaderOnConfirm: true,
                										  focusConfirm: false,
                										  confirmButtonText:'<i class="fa fa-thumbs-up"></i> Confirm',
                										  confirmButtonAriaLabel: "Thumbs up, great!",
                										  cancelButtonText:'<i class="fa fa-thumbs-down"></i>',
                										  cancelButtonAriaLabel: "Thumbs down",				  
                										  preConfirm: (password) => {
                											//return fetch(`//api.github.com/users/${password}`)//confirm-password url
                											return fetch(confirmPath + "/" + transaction_id  + "?password=" +`${password}`, {"method": "PUT"})//confirm-password url
                											  .then(response => {
                												if (!response.ok) {
                												  throw new Error(response.statusText)
                												}
                												return response.json()
                											  })
                											  .catch(error => {
                												Swal.showValidationMessage(
                												  `Request failed: ${error}`
                												)
                											  })
                										  },
                										  allowOutsideClick: () => !Swal.isLoading()
                										}).then((result) => {
                											if (result.code == 201) {
                												let status						
                												let timerInterval						
                												Swal.fire({
                												  title: "Traitement en cour",
                												  html: "STATUS : <b class=\"status_js\">Mise à jour de l\'historique de la transaction.</b>.",
                												  icon: "info",
                												  timer: 10000,
                												  timerProgressBar: true,
                												  onBeforeOpen: () => {
                													Swal.showLoading()
                													timerInterval = setInterval(() => {
                														//return fetch(`https://api.daticash.com/api/mobilemoney/${transaction_id}`, {"headers": {"apikey": "sec_5ed93806dd2ca"}})//confirm-password url
                                                        				return fetch(checkPath + "/" + transaction_id , {"method": "GET"})//check status url
                                                        				  .then(
                                                        					function(response) {
                                                        						console.log("application response after confirm = " + response);
                                                        					  if (!response.ok) {
                                                        					  // Examine the text in the response
                                                        						  response.json().then(function(data) {
                                                        							 status = data.step_description
                                                        							console.log(data.step_description);
                                                        						})
                                                        					  }else{
                                                        					  // Examine the text in the response
                                                        						  response.json().then(function(data) {
                                                        							 status = data.step_description
                                                        							console.log("api response after confirm = " +data.step_description);
                                                        						
                                                        							switch(data.status.toLowerCase()) {
                                                        								case "completed"://Action successfully
                                                        										Swal.fire(
                                                        										  "Complete!",
                                                        										  "Your transaction Successfully Completed.",
                                                        										  "success"
                                                        										)
                                                        									break;
                                                        									
                                                        								case "failed"://BAD_REQUEST
                                                        										Swal.fire(
                                                        										  "ERROR!",
                                                        										  "Something is wrong with the request, possibly missing or improperly formatted parameters",
                                                        										  "error"
                                                        										)
                                                        									break;
                                                        							}
                															  
                    															  const content = Swal.getContent()
                    															  if (content) {
                    																const b = content.querySelector(".status_js")
                    																if (b) {
                    																  b.textContent = status
                    																}
                    															  }							  
                    															})
                                                        					  }
                                                        					})
                    														  .catch(function(err) {
                    															console.log("Fetch Error :-S", err);
                    														  });			  
                
                													}, 1000);							
                												  },						  
                												  showLoaderOnConfirm: true,
                												  onClose: () => {
                													clearInterval(timerInterval)
                													Swal.fire(
                													  "Aborded!",
                													  "Your session has been closed. But your transaction take too time...",
                													  "info"
                													)							
                												  }						  
                												}).then((result) => {
                												  // Read more about handling dismissals below 
                												  if (result.dismiss === Swal.DismissReason.timer) {
                													console.log("I was closed by the timer")
                													Swal.fire({
                													  title: "<strong>STATUS TRANSACTION</strong>",
                													  icon: "info",
                													  html:
                														"Was closed by the timer. Your transaction <b>take too time</b>, go to your " +
                														"<a href=\"//daticash.com/dashborad\" target=\"_blank\">dashborad</a> " +
                														"to check manually this transaction status",
                													  showCloseButton: true,
                													  showCancelButton: false,
                													  focusConfirm: false,
                													  confirmButtonText:"OK",
                													})														
                												  }
                												})	
                
                											}
                										})									
                									break;
                									
                								default :
                								
                							}
                						  //end success process transaction	
            						      }else{
            						         Swal.fire({
                                    			  title: "ERROR!",
                                    			  icon: "error",
                                    			  text: "Bad Request thrown(Something is wrong with the request, possibly missing or improperly formatted parameter) or Resource Not Found(The given id may be wrong...) ",
                                    			  showCloseButton: true,
                                    			  showCancelButton: false,
                                    			  focusConfirm: false,
                                    			  confirmButtonText:"OK",
                                    			}).then(function() {
                                    			    window.location = "{{ path("dashboard.index") }}";
                            					}) 
            						      }
            						      //end error process transaction
            						      
            						  })
            					  }
            					  
            					  const content = Swal.getContent()
            					  if (content) {
            						const b = content.querySelector(".status_js")
            						if (b) {
            						  b.textContent = status
            						}
            					  }							  
            					}
            				  )
            				  .catch(function(err) {
            					console.log("Fetch Error :-S", err);
            				      Swal.fire({
                        			  title: "ERROR!",
                        			  icon: "error",
                        			  text: "Connection failed",
                        			  showCloseButton: true,
                        			  showCancelButton: false,
                        			  focusConfirm: false,
                        			  confirmButtonText:"OK",
                        			}).then(function() {
                        			    window.location = "{{ path("dashboard.index") }}";
                					})
            				  });			  
            
            			}, 1000);							
            		  },						  
            		  showLoaderOnConfirm: true,
            		  onClose: () => {
            			clearInterval(timerInterval)
            			Swal.fire(
            			  "ABORDED!",
            			  "Your session has been closed. But your transaction take too time...",
            			  "info"
            			)							
            		  }						  
            		}).then((result) => {
            		  // Read more about handling dismissals below 
            		  if (result.dismiss === Swal.DismissReason.timer) {
            			console.log("I was closed by the timer")
            			Swal.fire({
            			  title: "<strong>STATUS TRANSACTION</strong>",
            			  icon: "info",
            			  html:
            				"Was closed by the timer. Your transaction <b>take too time</b>, go to your " +
            				"<a href=\"//daticash.com/dashborad\" target=\"_blank\">dashborad</a> " +
            				"to check manually this transaction status",
            			  showCloseButton: true,
            			  showCancelButton: false,
            			  focusConfirm: false,
            			  confirmButtonText:"OK",
            			}).then(function() {
            			    window.location = "{{ path("dashboard.index") }}";
    					})														
            		  }
            		})	
                /*********************************************************** end process transaction *********************************************/
                }else{
        			Swal.fire({
        			  title: "ERROR!",
        			  icon: "error",
        			  text: "Unknow transaction Identifier.(Your transaction initiation have been maiby initiated, but processing failed...); Check your history to see more details).",
        			  showCloseButton: true,
        			  showCancelButton: false,
        			  focusConfirm: false,
        			  confirmButtonText:"OK",
        			}).then(function() {
        			    window.location = "{{ path("dashboard.index") }}";
					})
        			
                } 
			});		
			</script>
            
{% endblock %}